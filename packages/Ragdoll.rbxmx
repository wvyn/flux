<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
<Meta name="ExplicitAutoJoints">true</Meta>
<Item class="ModuleScript" referent="RBX1FBH32XNEDDB156QW5Y0J0V0EHPFO3JA">
<Properties>
<string name="Name">Ragdoll</string>
<string name="ScriptGuid">{09f0cd0b-aea3-43ee-9323-22751af18907}</string>
<ProtectedString name="Source"><![CDATA[local runService = game:GetService("RunService")
local players = game:GetService("Players")

local isServer = runService:IsServer()

local Ragdoll = { _rigs = {} }
local RagdollMethods = {}

local function useAttachment(name: string, position: Vector3, parent: Instance): Attachment
	local existing = parent:FindFirstChild(name)
	if existing then return existing end
	
	local attachment = Instance.new("Attachment")
	attachment.Name = name
	attachment.Position = position
	attachment.Parent = parent
	return attachment
end

local reducedSize = 0.85
local function createRagdollParts(character: Model)
	local partsContainer = Instance.new("Camera")
	partsContainer.Name = "RagdollParts"
	
	local head: Part = Instance.fromExisting(character:WaitForChild("Head"))
	local torso: Part = Instance.fromExisting(character:WaitForChild("Torso"))
	local leftArm: Part = Instance.fromExisting(character:WaitForChild("Left Arm"))
	local rightArm: Part = Instance.fromExisting(character:WaitForChild("Right Arm"))
	local leftLeg: Part = Instance.fromExisting(character:WaitForChild("Left Leg"))
	local rightLeg: Part = Instance.fromExisting(character:WaitForChild("Right Leg"))
	
	head.CollisionGroup = "Ragdoll"
	torso.CollisionGroup = "Ragdoll"
	leftArm.CollisionGroup = "Ragdoll"
	rightArm.CollisionGroup = "Ragdoll"
	leftLeg.CollisionGroup = "Ragdoll"
	rightLeg.CollisionGroup = "Ragdoll"
	
	head.Transparency = 1
	torso.Transparency = 1
	leftArm.Transparency = 1
	rightArm.Transparency = 1
	leftLeg.Transparency = 1
	rightLeg.Transparency = 1
	
	head.Size *= reducedSize
	torso.Size *= reducedSize
	leftArm.Size *= reducedSize
	rightArm.Size *= reducedSize
	leftLeg.Size *= reducedSize
	rightLeg.Size *= reducedSize
	
	head.CanCollide = false
	torso.CanCollide = false
	leftArm.CanCollide = false
	rightArm.CanCollide = false
	leftLeg.CanCollide = false
	rightLeg.CanCollide = false
	
	head.Massless = true
	torso.Massless = true
	leftArm.Massless = true
	rightArm.Massless = true
	leftLeg.Massless = true
	rightLeg.Massless = true
	
	head.Parent = partsContainer
	torso.Parent = partsContainer
	leftArm.Parent = partsContainer
	rightArm.Parent = partsContainer
	leftLeg.Parent = partsContainer
	rightLeg.Parent = partsContainer
	
	partsContainer.Parent = character
	
	return {
		Head = head,
		Torso = torso,
		["Left Arm"] = leftArm,
		["Right Arm"] = rightArm,
		["Left Leg"] = leftLeg,
		["Right Leg"] = rightLeg
	}, partsContainer
end

local function createAttachments(ragdollParts: typeof(createRagdollParts()))
	local head = ragdollParts.Head
	local headSize = head.Size * 1/reducedSize
	
	local torso = ragdollParts.Torso
	local torsoSize = torso.Size * 1/reducedSize
	
	local leftArm = ragdollParts["Left Arm"]
	local leftArmSize = leftArm.Size * 1/reducedSize
	
	local rightArm = ragdollParts["Right Arm"]
	local rightArmSize = rightArm.Size * 1/reducedSize
	
	local leftLeg = ragdollParts["Left Leg"]
	local leftLegSize = leftLeg.Size * 1/reducedSize
	
	local rightLeg = ragdollParts["Right Leg"]
	local rightLegSize = rightLeg.Size * 1/reducedSize
	
	local attachments = {
		["Head"] = { Neck = useAttachment("NeckAttachment", Vector3.new(0, -headSize.Y/2), head) },
		Torso = {
			Neck = useAttachment("NeckAttachment", Vector3.new(0, torsoSize.Y/2), torso),
			LeftCollar = useAttachment("LeftCollarAttachment", Vector3.new(-torsoSize.X/2, torsoSize.Y/2), torso),
			RightCollar = useAttachment("RightCollarAttachment", Vector3.new(torsoSize.X/2, torsoSize.Y/2), torso),
			LeftHip = useAttachment("LeftHipAttachment", Vector3.new(-torsoSize.X/2, -torsoSize.Y/2), torso),
			RightHip = useAttachment("RightHipAttachment", Vector3.new(torsoSize.X/2, -torsoSize.Y/2), torso),
		},
		["Left Arm"] = { LeftCollar = useAttachment("LeftCollarAttachment", Vector3.new(leftArmSize.X/2, leftArmSize.Y/2, 0), leftArm) },
		["Right Arm"] = { RightCollar = useAttachment("RightCollarAttachment", Vector3.new(-rightArmSize.X/2, rightArmSize.Y/2, 0), rightArm) },
		["Left Leg"] = { LeftHip = useAttachment("LeftHipAttachment", Vector3.new(-leftLegSize.X/2, leftLegSize.Y/2, 0), leftLeg) },
		["Right Leg"] = { RightHip = useAttachment("RightHipAttachment", Vector3.new(rightLegSize.X/2, rightLegSize.Y/2, 0), rightLeg) },
	}
	
	return attachments
end

local function bindSocket(attachment0: Attachment, attachment1: Attachment)
	local ballSocketConstraint = Instance.new("BallSocketConstraint")
	ballSocketConstraint.Name = `{attachment1.Name}Socket`
	ballSocketConstraint.Attachment0 = attachment0
	ballSocketConstraint.Attachment1 = attachment1
	ballSocketConstraint.Enabled = false
	ballSocketConstraint.LimitsEnabled = true
	ballSocketConstraint.UpperAngle = 60
	ballSocketConstraint.TwistLimitsEnabled = true
	ballSocketConstraint.TwistLowerAngle = -45
	ballSocketConstraint.TwistUpperAngle = 45
	ballSocketConstraint.Parent = attachment0.Parent
	return ballSocketConstraint
end

local function createSockets(attachments: typeof(createAttachments()))
	return {
		Neck = bindSocket(attachments.Torso.Neck, attachments.Head.Neck),
		LeftCollar = bindSocket(attachments.Torso.LeftCollar, attachments["Left Arm"].LeftCollar),
		RightCollar = bindSocket(attachments.Torso.RightCollar, attachments["Right Arm"].RightCollar),
		LeftHip = bindSocket(attachments.Torso.LeftHip, attachments["Left Leg"].LeftHip),
		RightHip = bindSocket(attachments.Torso.RightHip, attachments["Right Leg"].RightHip)
	}
end

local function getJoints(character: Model)
	local torso: Part = character.Torso
	
	local joints = {
		Neck = torso.Neck :: Motor6D,
		RootJoint = character.HumanoidRootPart.RootJoint :: Motor6D,
		["Left Shoulder"] = torso["Left Shoulder"] :: Motor6D,
		["Right Shoulder"] = torso["Right Shoulder"] :: Motor6D,
		["Left Hip"] = torso["Left Hip"] :: Motor6D,
		["Right Hip"] = torso["Right Hip"] :: Motor6D
	}
	
	return joints
end

local function createTorsoWeld(torso: Part, part: Part)
	local weld = Instance.new("Weld")
	weld.Name = "RagdollTorsoWeld"
	weld.Part0 = torso
	weld.Part1 = part
	weld.Parent = part
	return weld
end

local function createTorsoWelds(character: Model, ragdollParts: typeof(createRagdollParts()))
	return {
		Head = createTorsoWeld(character.Torso, ragdollParts.Head),
		Torso = createTorsoWeld(character.Torso, ragdollParts.Torso),
		["Left Arm"] = createTorsoWeld(character.Torso, ragdollParts["Left Arm"]),
		["Right Arm"] = createTorsoWeld(character.Torso, ragdollParts["Right Arm"]),
		["Left Leg"] = createTorsoWeld(character.Torso, ragdollParts["Left Leg"]),
		["Right Leg"] = createTorsoWeld(character.Torso, ragdollParts["Right Leg"])
	}
end

function Ragdoll.new(character: Model)
	local existing = Ragdoll.find(character)
	if existing then return existing end
	
	local humanoid = character:FindFirstChildWhichIsA("Humanoid")
	if humanoid then
		local ragdoll = setmetatable({
			RId = `{math.random()}-{math.random()}`,
			Character = character,
			Humanoid = humanoid,
			
			IsRagdolled = false
		}, { __index = RagdollMethods })
		
		humanoid.RequiresNeck = false
		
		ragdoll.Parts, ragdoll.PartsContainer = createRagdollParts(character)
		ragdoll.Attachments = createAttachments(ragdoll.Parts)
		ragdoll.Sockets = createSockets(ragdoll.Attachments)
		ragdoll.Joints = getJoints(character)
		ragdoll.TorsoWelds = createTorsoWelds(character, ragdoll.Parts)
		Ragdoll._rigs[character] = ragdoll
		
		return ragdoll
	end
end

function Ragdoll.find(character: Model)
	if Ragdoll._rigs[character] then return Ragdoll._rigs[character] end
end

local ragdollReplication = script:WaitForChild("RagdollReplication")
function RagdollMethods.Toggle(self: Ragdoll, active: boolean)
	local toggle = active or active == nil and not self.IsRagdolled
	if toggle == self.IsRagdolled then return end
	self.IsRagdolled = toggle
	
	local character = self.Character
	local humanoid = self.Humanoid
	
	if isServer then
		humanoid.PlatformStand = toggle
		ragdollReplication:FireAllClients(character, toggle)
		return true
	end
	
	local localCharacter = not isServer and players.LocalPlayer.Character
	
	for partName, weld: Weld in next, self.TorsoWelds do
		if localCharacter == character and partName == "Torso" then continue end
		weld.Enabled = not toggle
	end; for _, part: Part in next, self.Parts do
		part.CanCollide = toggle
		part.CFrame = character[part.Name].CFrame
	end; for _, joint: Motor6D in next, self.Joints do
		if joint.Name == "RootJoint" then continue end
		joint.Enabled = not toggle
	end; for _, socket: BallSocketConstraint in next, self.Sockets do
		socket.Enabled = toggle
	end
	
	if localCharacter ~= character then
		self.Parts.Torso.Anchored = toggle
	end
	
	if toggle then
		runService:BindToRenderStep(`Ragdoll-{self.RId}`, Enum.RenderPriority.Character.Value - 2, function()
			humanoid.PlatformStand = toggle
			for _, part: Part in next, self.Parts do
				local bodyPart = character[part.Name]
				bodyPart.CanCollide = not toggle

				if part.Name == "Torso" and localCharacter ~= character then
					part.CFrame = bodyPart.CFrame
				else
					bodyPart.CFrame = part.CFrame
				end
			end
		end)
	else
		runService:UnbindFromRenderStep(`Ragdoll-{self.RId}`)
		humanoid.PlatformStand = toggle
	end
	
	return true
end

function RagdollMethods.Destroy(self: Ragdoll)
	runService:UnbindFromRenderStep(`Ragdoll-{self.RId}`)
	self.PartsContainer:Destroy()
	for i in next, self do
		self[i] = nil
	end; setmetatable(self, {})
	return
end

export type Ragdoll = typeof(Ragdoll.new())

if not isServer then
	ragdollReplication.OnClientEvent:Connect(function(character: Model, toggle: boolean)
		local ragdoll = Ragdoll.new(character)
		ragdoll:Toggle(toggle)
	end)
end

return Ragdoll]]></ProtectedString>
</Properties>
<Item class="RemoteEvent" referent="RBXCU0R70I55T1TO1XNNPXKJX0Q84XK9SJD">
<Properties>
<string name="Name">RagdollReplication</string>
</Properties>
</Item>
</Item>
</roblox>
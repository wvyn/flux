<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
    <Meta name="ExplicitAutoJoints">true</Meta>
    <Item class="ModuleScript" referent="RBXY15GYS0X6QUFIV8879V3LGV7BZ369JDZ">
        <Properties>
            <string name="Name">force/CharacterCustomization</string>
            <string name="ScriptGuid">{ca87e677-fd91-4eed-aa6e-e2f2d9d96cb9}</string>
            <ProtectedString name="Source"><![CDATA[--[[
	FORCE CharacterCustomization
	 _ _ _                     
	| | | |_ _ _ _ ___ ___ ___ 
	| | | | | | | | -_|  _|   |
	|_____|_  |\_/|___|_| |_|_|
	      |___|    

    This module handles the customization of a character's appearance by allowing the 
    addition, removal, and management of accessories (armor, equipment, mando armors) to a character.

    Key Components:
    1. CharacterCustomization: The main object representing a character's customization. 
       It stores and manages the character's armor, accessories, and customization priorities.
    2. EquipAccessory: Adds an accessory (armor/equipment) to the character.
    3. RemoveAccessory: Removes a specific accessory from the character.
    4. HideAccessory: Hides a specific accessory, making it invisible but still attached to the character.
    5. RevealAccessory: Reveals a hidden accessory, making it visible again.
    6. EquipArmor: Equip a specific armor set to the character.
    7. EquipEquipment: Equip an equipment item to the character.
    8. EquipMandoArmor: Equip a Mandalorian armor to the character.
    9. RemoveArmor: Removes all armor from the character.
    10. Destroy: Cleans up and removes the customization, optionally destroying the created folders.

    Example Usage:

    -- Creating a new CharacterCustomization
    local customization = CharacterCustomization.new(character, clientOverride)
    
    -- Equipping Armor
    customization:EquipArmor("Freshspawn4", 2)
    
    -- Equipping Equipment
    customization:EquipEquipment("GreenPauldron", 3)
    
    -- Removing Armor
    customization:RemoveArmor()
    
    -- Hiding Armor/Accessory
    customization:HideAccessory("GreenPauldron")
    
    -- Revealing Armor/Accessory
    customization:RevealAccessory("GreenPauldron")
    
    -- Destroying Customization
    customization:Destroy(true) -- Optionally destroy folders

    Arguments Explained:

    CharacterCustomization.new(character: Model, clientOverride: boolean?):
    - character: The character model you want to customize
    - clientOverride: An optional boolean value. If true, the client can create the necessary folders for Armor and Accessories, even if it's not the server. Default is false if omitted.

    CharacterCustomization:EquipAccessory(armor: Folder | string, priority: number | ArmorPriorityInt, armorData: ArmorData?, parent: string, assetFolder: Folder):
    - armor: The accessory or armor part you want to equip. It can be a string (name of the accessory) or a Folder containing the accessory parts.
    - priority: The priority level of the armor or accessory, which determines its display order. If number is provided, it applies to all parts. If ArmorPriorityInt is used, it allows specific priorities for different body parts (e.g., Head, Torso).
    - armorData: (Optional) Additional data for the armor, such as whether it should be hidden. If omitted, it uses default values.
    - parent: The folder name where the accessory will be parented. Examples include "Armor" or "Accessories".
    - assetFolder: The folder containing the assets (armor, equipment, etc.) in the ServerStorage service.

    CharacterCustomization:RemoveAccessory(accessory: string?, assetFolderName: string?):
    - accessory: The name of the accessory to remove. If nil, all accessories of the specified asset folder will be removed.
    - assetFolderName: The name of the asset folder (e.g., "Armor" or "Accessories"). This allows removal from specific folders.

    CharacterCustomization:HideAccessory(accessory: string?):
    - accessory: The name of the accessory you wish to hide. If nil, no changes are made.

    CharacterCustomization:RevealAccessory(accessory: string?):
    - accessory: The name of the accessory you wish to reveal. If nil, no changes are made.

    CharacterCustomization:RemoveArmor(armor: string?):
    - armor: The name of the armor to remove. If nil, all armor is removed from the character.

    CharacterCustomization:EquipArmor(armor: ArmorName, priority: number | ArmorPriorityInt, armorData: ArmorData?):
    - armor: The name of the armor from the Armor folder in ServerStorage (e.g., "Deathwatch", "Clonetrooper Purple").
    - priority: The priority level (same format as in EquipAccessory). Determines the display order for each part.
    - armorData: (Optional) Additional settings for the armor (e.g., whether it should be hidden).

    CharacterCustomization:EquipEquipment(equipment: EquipmentName, priority: number | ArmorPriorityInt, armorData: ArmorData?):
    - equipment: The name of the equipment item from the Equipment folder in ServerStorage (e.g., "Gray Vigil Scarf", "BlueKama").
    - priority: The priority for displaying the equipment.
    - armorData: (Optional) Additional settings for the equipment.

    CharacterCustomization:EquipMandoArmor(mandoArmor: MandoArmorName, priority: number | ArmorPriorityInt, armorData: ArmorData?):
    - mandoArmor: The name of the Mandalorian armor from the MandoArmors folder in ServerStorage (e.g., "Beskaar Pauldron Right Arm", "Din Djarin Right Leg").
    - priority: The priority for displaying the Mando armor.
    - armorData: (Optional) Additional settings for the Mando armor.

    CharacterCustomization:Destroy(destroyFolders: boolean?):
    - destroyFolders: (Optional) If true, the folders created for armor and accessories will be destroyed. Defaults to false.
    
	Notes:
    - Priorities with a value of `-1` are always shown, regardless of other priorities. This ensures that such accessories or armor parts remain visible even if they are behind other elements in the display hierarchy.

    Arguments Summary:
    - character: A Model (the character).
    - clientOverride: (Optional) Boolean to allow clients to override folder creation.
    - armor: The name or folder of the accessory to equip/remove.
    - priority: A number or ArmorPriorityInt that specifies the priority order of each part.
    - armorData: (Optional) Data for customizing the armor's behavior (e.g., Hidden).
    - parent: The folder in which the accessory will be placed.
    - assetFolder: The folder containing asset models (Armor, Equipment, etc.).
    - accessory: The name of the accessory to hide/reveal or remove.
    - destroyFolders: (Optional) Boolean to decide whether to destroy the created folders.
]]

local runService = game:GetService("RunService")
local serverStorage = game:GetService("ServerStorage")

local WeldModel = require("./WeldModel")

local Armor = serverStorage.Armor
local Equipment = serverStorage.Equipment
local MandoArmors = serverStorage.MandoArmors

local CharacterCustomization = {}
local CustomizationMethods = {}

export type ArmorData = {
	Hidden: boolean,
	External: boolean
}

export type PartPriority = {
	Priority: number,
	Part: Instance,
	Parent: Instance,
	AssetFolderName: string,
	Data: ArmorData
}
export type ArmorPriority = {
	Head: PartPriority,
	Torso: PartPriority,
	["Left Arm"]: PartPriority,
	["Right Arm"]: PartPriority,
	["Left Leg"]: PartPriority,
	["Right Leg"]: PartPriority,
	External: PartPriority
}

local DefaultArmorPriority = {
	Head = 0,
	Torso = 0,
	["Left Arm"] = 0,
	["Right Arm"] = 0,
	["Left Leg"] = 0,
	["Right Leg"] = 0,
	Pants = 0,
	Shirt = 0
}

export type ArmorPriorityInt = typeof(DefaultArmorPriority)

local DefaultArmorData = {
	Head = {},
	Torso = {},
	["Left Arm"] = {},
	["Right Arm"] = {},
	["Left Leg"] = {},
	["Right Leg"] = {},
	Pants = {},
	Shirt = {}
}

export type ArmorData = typeof(DefaultArmorData)

export type ArmorName = keyof<typeof(Armor)>
export type EquipmentName = keyof<typeof(Equipment)>
export type MandoArmorName = keyof<typeof(MandoArmors)>

local function createFolder(name: string, parent: Instance)
	local folder = Instance.new("Folder")
	folder.Name = name
	folder.Parent = parent
	return folder
end

local rigs = {}

-- Create a new Charcater Customization, clientOverride allows clients to create folders otherwise it wont create them
function CharacterCustomization.new(character: Model, clientOverride: boolean?)
	local existingCharacter = CharacterCustomization.find(character) 
	if existingCharacter then return existingCharacter end
	
	local customization = setmetatable({
		Folders = runService:IsClient() and not clientOverride and {
			Armor = character:WaitForChild("Armor"),
			Accessories = character:WaitForChild("Armor"),
			MandoArmors = character:WaitForChild("Armor")
		} or {
			Armor = createFolder("Armor", character),
			Accessories = createFolder("Accessories", character),
			MandoArmors = character.Accessories,
		},
		
		Connections = {} :: {
			ParentChanged: RBXScriptConnection
		},
		
		Character = character,
		Priorities = {} :: { [string]: ArmorPriority }
	}, {
		__index = CustomizationMethods
	})
	
	customization.Connections.ParentChanged = character:GetPropertyChangedSignal("Parent"):Connect(function()
		if not character.Parent then
			customization:Destroy()
		end
	end)
	
	rigs[character] = customization
	return customization
end

function CharacterCustomization.find(character: Model)
	return rigs[character]
end

local function getPriorityOfNumber(priority: number)
	local armorPriority = table.clone(DefaultArmorPriority)
	for partName in next, armorPriority do
		armorPriority[partName] = priority
	end; return armorPriority
end

-- Update Accessories if a change has been made
function CustomizationMethods.UpdateAccessory(self: CharacterCustomization)
	local priorities = {}
	for armorName, armorParts in next, self.Priorities do
		for partName, partPriority in next, armorParts do
			if not priorities[partName] then priorities[partName] = {} end
			priorities[partName][#priorities[partName] + 1] = partPriority
		end
	end
	
	local highestPriority = {}
	local nilParents = {}
	for partName, parts: { PartPriority } in next, priorities do
		for _, partPriority: PartPriority in next, parts do
			if partPriority.Data.Hidden then
				nilParents[#nilParents + 1] = partPriority.Part
			elseif partPriority.Priority == -1 then
				partPriority.Part.Parent = self.Folders.Armor
			elseif not highestPriority[partName] or highestPriority[partName].Priority <= partPriority.Priority then
				if not highestPriority[partName] then highestPriority[partName] = { Priority = partPriority.Priority, Parts = {} } end
				if partPriority.Priority == highestPriority[partName].Priority then
					highestPriority[partName].Parts[#highestPriority[partName].Parts + 1] = partPriority
				else
					for i in highestPriority[partName].Parts do nilParents[#nilParents + 1] = highestPriority[partName].Parts[i].Part end
					table.clear(highestPriority[partName].Parts)
					highestPriority[partName].Priority = partPriority.Priority
				end
			else
				nilParents[#nilParents + 1] = partPriority.Part
			end
		end
	end
	
	for _, part in next, nilParents do
		part.Parent = nil
	end
	
	for _, priority in next, highestPriority do
		for partName, partData in next, priority.Parts do
			partData.Part.Parent = partData.Data.External and self.Character or self.Folders[partData.Parent]
		end
	end
end

-- Standard Equip Accessory Function
function CustomizationMethods.EquipAccessory(self: CharacterCustomization, armor: Folder | string, priority: (number | ArmorPriorityInt)?, armorData: ArmorData?, parent: string, assetFolder: Folder)
	local newArmor: Instance = typeof(armor) == "string" and assetFolder:FindFirstChild(armor) and not self.Priorities[armor] and assetFolder[armor]:Clone() or armor
	if self.Priorities[armor] then return end -- Duplicate Accessory
	
	assert(newArmor and typeof(newArmor) == "Instance", "Armor is nil")
	
	armorData = armorData or {}
	for partName, data in next, DefaultArmorData do if not armorData[partName] then armorData[partName] = data end end 
	
	local partsPriority = priority and typeof(priority) == "number" and getPriorityOfNumber(priority) or priority or DefaultArmorPriority
	for partName, number in next, DefaultArmorPriority do if not partsPriority[partName] then partsPriority[partName] = number end end 
	
	local character = self.Character
	
	local armorPriority = {}
	for _, armorPart: Model in next, newArmor:GetChildren() do
		if armorPart:IsA("Model") and character:FindFirstChild(armorPart.Name) then
			local weldResult = WeldModel(armorPart, {
				root = armorPart.PrimaryPart or armorPart:FindFirstChild("Middle"),
				partProperties = {
					Anchored = false,
					Massless = true,
					CanCollide = false
				}
			})
			
			weldResult.Root.Transparency = 1
			
			local weldToCharacter = Instance.new("Weld")
			weldToCharacter.Name = "CharacterWeld"
			weldToCharacter.Part0 = character[armorPart.Name]
			weldToCharacter.Part1 = weldResult.Root
			weldToCharacter.Parent = weldResult.Root
			
			armorPriority[armorPart.Name] = { Priority = partsPriority[armorPart.Name], Part = armorPart, Parent = parent, AssetFolderName = assetFolder.Name, Data = armorData[armorPart.Name] }
		elseif armorPart:IsA("Clothing") then
			armorData[armorPart.Name].External = true
			armorPriority[armorPart.Name] = { Priority = partsPriority[armorPart.Name], Part = armorPart, Parent = parent, AssetFolderName = assetFolder.Name, Data = armorData[armorPart.Name] }
		end
	end
	
	self.Priorities[newArmor.Name] = armorPriority
	self:UpdateAccessory()
	return armorPriority
end

export type SetBodyColors = {
	Head: Color3,
	Torso: Color3,
	["Left Arm"]: Color3,
	["Right Arm"]: Color3,
	["Left Leg"]: Color3,
	["Right Leg"]: Color3
}

function CustomizationMethods.SetBodyColor(self: CharacterCustomization, color: Color3 | BrickColor | SetBodyColors)
	local bodyColors: BodyColors = self.Character:FindFirstChild("BodyColors")
	if not bodyColors then bodyColors = Instance.new("BodyColors", self.Character) end
	
	if typeof(color) == "Color3" then
		bodyColors.HeadColor3 = color
		bodyColors.TorsoColor3 = color
		bodyColors.LeftArmColor3 = color
		bodyColors.RightArmColor3 = color
		bodyColors.LeftLegColor3 = color
		bodyColors.RightLegColor3 = color
	elseif typeof(color) == "BrickColor" then
		bodyColors.HeadColor = color
		bodyColors.TorsoColor = color
		bodyColors.LeftArmColor = color
		bodyColors.RightArmColor = color
		bodyColors.LeftLegColor = color
		bodyColors.RightLegColor = color
	else
		for name, colorValue in next, color do
			bodyColors[`TorsoColor{typeof(colorValue) == "BrickColor" and "" or "3"}`] = colorValue
		end
	end
	
	return bodyColors
end

-- Hide Character Accessories (Accessory ClassName)
function CustomizationMethods.HideCharacterAccessories(self: CharacterCustomization)
	for _, accessory: Instance in next, self.Character:GetChildren() do
		if accessory:IsA("Accessory") then
			accessory.Handle.Transparency = 1
		end
	end
end

-- SHpw Character Accessories (Accessory ClassName)
function CustomizationMethods.ShowCharacterAccessories(self: CharacterCustomization)
	for _, accessory: Instance in next, self.Character:GetChildren() do
		if accessory:IsA("Accessory") then
			accessory.Handle.Transparency = 0
		end
	end
end

-- Standard Remove Accessory Function
function CustomizationMethods.RemoveAccessory(self: CharacterCustomization, accessory: string?, assetFolderName: string?)
	if accessory then
		if not self.Priorities[accessory] then return false end
		
		for index, partPriority: PartPriority in next, self.Priorities[accessory] do
			partPriority.Part.Parent = nil
		end
		
		self.Priorities[accessory] = nil
	else
		for armorName, armorPriority in next, self.Priorities do
			for index, partPriority: PartPriority in next, armorPriority do
				if partPriority.AssetFolderName == assetFolderName then
					partPriority.Part.Parent = nil
				end
				
				armorPriority[index] = nil
			end
			
			if not next(armorPriority) then
				self.Priorities[armorName] = nil
			end
		end
		
		return true
	end
end

-- Hides an Accessory
function CustomizationMethods.HideAccessory(self: CharacterCustomization, accessory: string?)
	if not self.Priorities[accessory] then return false end
	
	for _, part: PartPriority in next, self.Priorities[accessory] do
		part.Data.Hidden = true
	end
	
	self:UpdateAccessory()
	return true
end

-- Unhides an Accessory
function CustomizationMethods.RevealAccessory(self: CharacterCustomization, accessory: string?)
	if not self.Priorities[accessory] then return false end
	
	for _, part: PartPriority in next, self.Priorities[accessory] do
		part.Data.Hidden = false
	end

	self:UpdateAccessory()
	return true
end

-- Remove an Armor, if no armor is specified all armors are removed
function CustomizationMethods.RemoveArmor(self: CharacterCustomization, armor: string?)
	return self:RemoveAccessory(armor, "Armor")
end

-- Equip an Armor
function CustomizationMethods.EquipArmor(self: CharacterCustomization, armor: ArmorName, priority: (number | ArmorPriorityInt)?, armorData: ArmorData?)
	self:RemoveArmor()
	return self:EquipAccessory(armor, priority, armorData, "Armor", Armor)
end

-- Equip an Equipment
function CustomizationMethods.EquipEquipment(self: CharacterCustomization, equipment: EquipmentName, priority: (number | ArmorPriorityInt)?, armorData: ArmorData?)
	return self:EquipAccessory(equipment, priority, armorData, "Accessories", Equipment)
end

-- Remove an Equipment, if no equipment is specified all equipments are removed
function CustomizationMethods.EquipMandoArmor(self: CharacterCustomization, mandoArmor: MandoArmorName, priority: (number | ArmorPriorityInt)?, armorData: ArmorData?)
	return self:EquipAccessory(mandoArmor, priority, armorData, "Accessories", MandoArmors)
end

-- Clean up and Destroy the CharacterCustomization
function CustomizationMethods.Destroy(self: CharacterCustomization, destroyFolders: boolean?)
	if destroyFolders then
		for _, v in next, self.Folders do
			v:Destroy()
		end
	end
	
	rigs[self.Character] = nil
	for i in next, self do self[i] = nil end
	setmetatable(self, {})
end

export type CharacterCustomization = typeof(CharacterCustomization.new())

return CharacterCustomization]]></ProtectedString>
        </Properties>
    </Item>
</roblox>